import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import io
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Estat√≠stica de Dados",
    page_icon="üìä",
    layout="wide"
)

# T√≠tulo da aplica√ß√£o
st.title("üìä An√°lise Estat√≠stica - Dados 3¬∞ S√©ries e 9¬∞ Anos")

# Fun√ß√£o para carregar dados
@st.cache_data
def load_data(file_path):
    try:
        data = pd.read_csv(file_path)
        return data
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo {file_path}: {e}")
        return None

# Fun√ß√£o para an√°lise estat√≠stica b√°sica
def basic_statistics(data, dataset_name):
    st.header(f"üìà Descri√ß√£o dados - {dataset_name}")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.subheader("Informa√ß√µes Gerais")
        st.write(f"Total de registros: {data.shape[0]}")
        st.write(f"Total de vari√°veis: {data.shape[1]}")
        st.write(f"Valores nulos: {data.isnull().sum().sum()}")
    
    with col2:
        st.subheader("Tipos de Dados")
        dtype_counts = data.dtypes.value_counts()
        for dtype, count in dtype_counts.items():
            st.write(f"{dtype}: {count}")
    
    with col3:
        st.subheader("Amostra dos Dados")
        st.dataframe(data.head(), use_container_width=True)

# Fun√ß√£o para encontrar colunas similares
def find_similar_columns(data, keywords):
    """Encontra colunas que contenham as keywords fornecidas"""
    found_columns = []
    for col in data.columns:
        col_lower = col.lower()
        for keyword in keywords:
            if keyword.lower() in col_lower:
                found_columns.append(col)
                break
    return found_columns

# Fun√ß√£o para an√°lise estat√≠stica por escola
def school_statistics(data, dataset_name):
    st.header(f"üè´ Estat√≠sticas por Escola - {dataset_name}")
    
    # Mostrar todas as colunas dispon√≠veis para debug
    with st.expander("üîç Ver todas as colunas dispon√≠veis"):
        st.write(f"Total de colunas: {len(data.columns)}")
        st.write("Lista de colunas:")
        for i, col in enumerate(data.columns):
            st.write(f"{i+1}. {col} (tipo: {data[col].dtype})")
    
    # Encontrar colunas similares
    st.subheader("üéØ Sele√ß√£o de Colunas para An√°lise")
    
    # Procurar por coluna de pontos
    pontos_keywords = ['total', 'pontos', 'points', 'score', 'nota']
    colunas_pontos = find_similar_columns(data, pontos_keywords)
    
    # Procurar por coluna de escola
    escola_keywords = ['escola', 'school', 'col√©gio', 'colegio', 'institui√ß√£o']
    colunas_escola = find_similar_columns(data, escola_keywords)
    
    # Sele√ß√£o manual de colunas se n√£o encontrar automaticamente
    if not colunas_pontos or not colunas_escola:
        st.warning("‚ö†Ô∏è N√£o foi poss√≠vel encontrar as colunas automaticamente. Selecione manualmente:")
        
        col1, col2 = st.columns(2)
        
        with col1:
            coluna_total_pontos = st.selectbox(
                f"Selecione a coluna de Total de Pontos - {dataset_name}",
                data.columns,
                key=f"pontos_{dataset_name}"
            )
        
        with col2:
            coluna_escola = st.selectbox(
                f"Selecione a coluna de Escola - {dataset_name}",
                data.columns,
                key=f"escola_{dataset_name}"
            )
    else:
        # Usar as primeiras colunas encontradas
        coluna_total_pontos = colunas_pontos[0]
        coluna_escola = colunas_escola[0]
        
        st.success(f"‚úÖ Coluna de pontos selecionada: **{coluna_total_pontos}**")
        st.success(f"‚úÖ Coluna de escola selecionada: **{coluna_escola}**")
    
    # Preparar os dados
    with st.status("üîÑ Preparando dados para an√°lise...", expanded=True) as status:
        # Criar c√≥pia dos dados relevantes
        data_analysis = data[[coluna_escola, coluna_total_pontos]].copy()
        
        # Converter coluna de pontos para num√©rico se necess√°rio
        if data_analysis[coluna_total_pontos].dtype == 'object':
            st.write("Convertendo coluna de pontos para num√©rico...")
            data_analysis[coluna_total_pontos] = pd.to_numeric(
                data_analysis[coluna_total_pontos], 
                errors='coerce'
            )
        
        # Remover linhas com valores nulos
        initial_count = len(data_analysis)
        data_clean = data_analysis.dropna()
        final_count = len(data_clean)
        
        st.write(f"Registros antes da limpeza: {initial_count}")
        st.write(f"Registros ap√≥s remover valores nulos: {final_count}")
        st.write(f"Registros removidos: {initial_count - final_count}")
        
        if final_count == 0:
            st.error("‚ùå N√£o h√° dados v√°lidos para an√°lise ap√≥s a limpeza.")
            return
        
        # Verificar se h√° dados ap√≥s a limpeza
        escolas_unicas = data_clean[coluna_escola].nunique()
        st.write(f"N√∫mero de escolas √∫nicas: {escolas_unicas}")
        
        if escolas_unicas == 0:
            st.error("‚ùå N√£o h√° escolas para analisar.")
            return
        
        status.update(label="‚úÖ Dados preparados com sucesso!", state="complete", expanded=False)
    
    # Calcular estat√≠sticas por escola
    try:
        estatisticas_escolas = data_clean.groupby(coluna_escola)[coluna_total_pontos].agg([
            ('M√©dia', 'mean'),
            ('Mediana', 'median'),
            ('M√≠nimo', 'min'),
            ('M√°ximo', 'max'),
            ('Desvio_Padr√£o', 'std'),
            ('Quantidade_Alunos', 'count')
        ]).round(2)
        
        # Ordenar por m√©dia (opcional)
        estatisticas_escolas = estatisticas_escolas.sort_values('M√©dia', ascending=False)
        
        # Reset index para usar a coluna de escola nos gr√°ficos
        estatisticas_escolas_reset = estatisticas_escolas.reset_index()
        
        # Mostrar tabela de estat√≠sticas
        st.subheader("üìã Estat√≠sticas por Escola")
        
        # Adicionar filtros para a tabela
        col1, col2 = st.columns(2)
        with col1:
            min_alunos = st.slider(
                "Filtrar por quantidade m√≠nima de alunos",
                min_value=1,
                max_value=int(estatisticas_escolas['Quantidade_Alunos'].max()),
                value=1,
                key=f"min_alunos_{dataset_name}"
            )
        
        with col2:
            escolas_filtradas = st.multiselect(
                "Selecionar escolas espec√≠ficas",
                options=estatisticas_escolas_reset[coluna_escola].tolist(),
                default=estatisticas_escolas_reset[coluna_escola].head(10).tolist(),
                key=f"escolas_select_{dataset_name}"
            )
        
        # Aplicar filtros
        estatisticas_filtradas = estatisticas_escolas_reset[
            (estatisticas_escolas_reset['Quantidade_Alunos'] >= min_alunos) &
            (estatisticas_escolas_reset[coluna_escola].isin(escolas_filtradas) if escolas_filtradas else True)
        ]
        
        st.dataframe(estatisticas_filtradas, use_container_width=True)
        
        # Gr√°ficos interativos
        st.subheader("üìä Visualiza√ß√µes Interativas")
        
        # Layout com tabs para diferentes visualiza√ß√µes
        tab1, tab2, tab3, tab4 = st.tabs(["üèÜ M√©dias por Escola", "üë• Quantidade de Alunos", "üìà Compara√ß√£o Detalhada", "üéØ Distribui√ß√£o"])
        
        with tab1:
            # Gr√°fico de m√©dias por escola - INTERATIVO
            fig_medias = px.bar(
                estatisticas_filtradas.sort_values('M√©dia', ascending=True),
                x='M√©dia',
                y=coluna_escola,
                orientation='h',
                title=f'üèÜ M√©dia de Pontos por Escola - {dataset_name}',
                color='M√©dia',
                color_continuous_scale='viridis',
                hover_data={
                    'M√©dia': ':.2f',
                    'Mediana': ':.2f',
                    'Quantidade_Alunos': True,
                    'Desvio_Padr√£o': ':.2f'
                }
            )
            
            fig_medias.update_layout(
                yaxis_title='Escola',
                xaxis_title='M√©dia de Pontos',
                height=600,
                showlegend=False
            )
            
            # Adicionar linha da m√©dia geral
            media_geral = data_clean[coluna_total_pontos].mean()
            fig_medias.add_vline(
                x=media_geral, 
                line_dash="dash", 
                line_color="red",
                annotation_text=f"M√©dia Geral: {media_geral:.2f}"
            )
            
            st.plotly_chart(fig_medias, use_container_width=True)
        
        with tab2:
            # Gr√°fico de quantidade de alunos por escola - INTERATIVO
            fig_alunos = px.bar(
                estatisticas_filtradas.sort_values('Quantidade_Alunos', ascending=True),
                x='Quantidade_Alunos',
                y=coluna_escola,
                orientation='h',
                title=f'üë• Quantidade de Alunos por Escola - {dataset_name}',
                color='Quantidade_Alunos',
                color_continuous_scale='plasma',
                hover_data={
                    'Quantidade_Alunos': True,
                    'M√©dia': ':.2f',
                    'Mediana': ':.2f'
                }
            )
            
            fig_alunos.update_layout(
                yaxis_title='Escola',
                xaxis_title='N√∫mero de Alunos',
                height=600,
                showlegend=False
            )
            
            st.plotly_chart(fig_alunos, use_container_width=True)
        
        with tab3:
            # Scatter plot comparando m√©dia vs quantidade de alunos - INTERATIVO
            fig_scatter = px.scatter(
                estatisticas_filtradas,
                x='Quantidade_Alunos',
                y='M√©dia',
                size='Quantidade_Alunos',
                color='M√©dia',
                hover_name=coluna_escola,
                title=f'üìà Rela√ß√£o entre Quantidade de Alunos e M√©dia de Pontos - {dataset_name}',
                size_max=60,
                color_continuous_scale='rainbow',
                hover_data={
                    'Mediana': ':.2f',
                    'Desvio_Padr√£o': ':.2f',
                    'M√≠nimo': ':.2f',
                    'M√°ximo': ':.2f'
                }
            )
            
            fig_scatter.update_layout(
                xaxis_title='Quantidade de Alunos',
                yaxis_title='M√©dia de Pontos',
                height=500
            )
            
            # Adicionar linhas de refer√™ncia
            fig_scatter.add_hline(
                y=media_geral, 
                line_dash="dash", 
                line_color="red",
                annotation_text=f"M√©dia Geral"
            )
            
            st.plotly_chart(fig_scatter, use_container_width=True)
        
        with tab4:
            # Box plot interativo da distribui√ß√£o por escola
            # Selecionar top escolas para o box plot (para n√£o sobrecarregar o gr√°fico)
            top_escolas = estatisticas_filtradas.nlargest(15, 'Quantidade_Alunos')[coluna_escola].tolist()
            data_top_escolas = data_clean[data_clean[coluna_escola].isin(top_escolas)]
            
            fig_box = px.box(
                data_top_escolas,
                x=coluna_escola,
                y=coluna_total_pontos,
                title=f'üéØ Distribui√ß√£o de Pontos por Escola (Top 15 por quantidade de alunos) - {dataset_name}',
                color=coluna_escola,
                points="all"
            )
            
            fig_box.update_layout(
                xaxis_title='Escola',
                yaxis_title='Pontos',
                height=500,
                showlegend=False
            )
            
            fig_box.update_xaxes(tickangle=45)
            
            st.plotly_chart(fig_box, use_container_width=True)
        
        # Estat√≠sticas resumidas em cards
        st.subheader("üìä Resumo Geral")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Total de Escolas", 
                estatisticas_escolas.shape[0],
                f"{estatisticas_filtradas.shape[0]} filtradas"
            )
            st.metric("M√©dia Geral", f"{data_clean[coluna_total_pontos].mean():.2f}")
        
        with col2:
            st.metric(
                "Total de Alunos", 
                estatisticas_escolas['Quantidade_Alunos'].sum(),
                f"{estatisticas_filtradas['Quantidade_Alunos'].sum()} filtrados"
            )
            st.metric("Mediana Geral", f"{data_clean[coluna_total_pontos].median():.2f}")
        
        with col3:
            st.metric("Maior M√©dia", f"{estatisticas_escolas['M√©dia'].max():.2f}")
            st.metric("Menor M√©dia", f"{estatisticas_escolas['M√©dia'].min():.2f}")
        
        with col4:
            st.metric("Desvio Padr√£o Geral", f"{data_clean[coluna_total_pontos].std():.2f}")
            st.metric("Amplitude Total", f"{data_clean[coluna_total_pontos].max() - data_clean[coluna_total_pontos].min():.2f}")
        
        # Download dos dados processados
        st.subheader("üíæ Exportar Dados")
        csv = estatisticas_escolas_reset.to_csv(index=False)
        st.download_button(
            label="üì• Baixar estat√≠sticas por escola em CSV",
            data=csv,
            file_name=f"estatisticas_escolas_{dataset_name.lower().replace(' ', '_')}.csv",
            mime="text/csv"
        )
            
    except Exception as e:
        st.error(f"‚ùå Erro ao calcular estat√≠sticas: {e}")
        st.info("Isso pode ocorrer se n√£o houver dados num√©ricos suficientes para an√°lise.")

# Fun√ß√£o para an√°lise detalhada das colunas
def column_analysis(data, dataset_name):
    st.header(f"üîç An√°lise por Coluna - {dataset_name}")
    
    # Sele√ß√£o m√∫ltipla de colunas
    st.subheader("üéØ Sele√ß√£o de Colunas para An√°lise")
    
    # Encontrar colunas similares automaticamente
    escola_keywords = ['escola', 'school', 'col√©gio', 'colegio', 'institui√ß√£o']
    nota_lp_keywords = ['nota lp', 'nota_lp', 'portugues', 'portugu√™s', 'lingua portuguesa']
    nota_mat_keywords = ['nota mat', 'nota_mat', 'matem√°tica', 'matematica', 'math']
    
    colunas_escola = find_similar_columns(data, escola_keywords)
    colunas_nota_lp = find_similar_columns(data, nota_lp_keywords)
    colunas_nota_mat = find_similar_columns(data, nota_mat_keywords)
    
    # Sele√ß√£o de colunas
    col1, col2 = st.columns(2)
    
    with col1:
        coluna_agrupamento = st.selectbox(
            f"Selecione a coluna para agrupamento - {dataset_name}",
            options=data.columns.tolist(),
            index=data.columns.tolist().index(colunas_escola[0]) if colunas_escola else 0,
            key=f"agrupamento_{dataset_name}"
        )
    
    with col2:
        colunas_analise = st.multiselect(
            f"Selecione as colunas para an√°lise - {dataset_name}",
            options=data.columns.tolist(),
            default=colunas_nota_lp[:1] + colunas_nota_mat[:1] if colunas_nota_lp or colunas_nota_mat else [],
            key=f"analise_{dataset_name}"
        )
    
    if not coluna_agrupamento or not colunas_analise:
        st.warning("‚ö†Ô∏è Selecione pelo menos uma coluna de agrupamento e uma coluna para an√°lise.")
        return
    
    # Verificar se temos a combina√ß√£o espec√≠fica de colunas
    tem_escola = any(keyword in coluna_agrupamento.lower() for keyword in escola_keywords)
    tem_nota_lp = any(any(keyword in col.lower() for keyword in nota_lp_keywords) for col in colunas_analise)
    tem_nota_mat = any(any(keyword in col.lower() for keyword in nota_mat_keywords) for col in colunas_analise)
    
    # An√°lise espec√≠fica para combina√ß√£o escola + notas
    if tem_escola and (tem_nota_lp or tem_nota_mat):
        st.subheader("üè´ An√°lise de Notas por Escola")
        
        # Preparar dados
        colunas_analise_selecionadas = [coluna_agrupamento] + colunas_analise
        data_analysis = data[colunas_analise_selecionadas].copy()
        
        # Converter colunas num√©ricas
        for col in colunas_analise:
            if data_analysis[col].dtype == 'object':
                data_analysis[col] = pd.to_numeric(data_analysis[col], errors='coerce')
        
        # Remover valores nulos
        data_clean = data_analysis.dropna()
        
        if len(data_clean) == 0:
            st.error("‚ùå N√£o h√° dados v√°lidos para an√°lise ap√≥s a limpeza.")
            return
        
        # Calcular estat√≠sticas agrupadas
        estatisticas_escolas = data_clean.groupby(coluna_agrupamento)[colunas_analise].agg(['mean', 'std', 'count']).round(2)
        
        # Renomear colunas para melhor visualiza√ß√£o
        estatisticas_escolas.columns = ['_'.join(col).strip() for col in estatisticas_escolas.columns.values]
        estatisticas_escolas = estatisticas_escolas.reset_index()
        
        # Criar descri√ß√£o personalizada baseada nas colunas selecionadas
        descricao_analise = ""
        if tem_nota_lp and not tem_nota_mat:
            descricao_analise = "m√©dias em Portugu√™s"
        elif tem_nota_mat and not tem_nota_lp:
            descricao_analise = "m√©dias em Matem√°tica"
        elif tem_nota_lp and tem_nota_mat:
            descricao_analise = "m√©dias em Portugu√™s e Matem√°tica"
        
        st.write(f"**Descri√ß√£o:** {descricao_analise} agrupadas por {coluna_agrupamento}")
        
        # Mostrar tabela de estat√≠sticas
        st.subheader("üìä Estat√≠sticas Agrupadas")
        st.dataframe(estatisticas_escolas, use_container_width=True)
        
        # Gr√°ficos interativos
        st.subheader("üìà Visualiza√ß√µes")
        
        # Preparar dados para gr√°ficos
        dados_melted = data_clean.melt(
            id_vars=[coluna_agrupamento],
            value_vars=colunas_analise,
            var_name='Disciplina',
            value_name='Nota'
        )
        
        # Criar tabs para diferentes visualiza√ß√µes
        tab1, tab2, tab3, tab4 = st.tabs(["üèÜ Ranking de M√©dias", "üìà Compara√ß√£o Horizontal", "üéØ Distribui√ß√£o", "üìã Estat√≠sticas"])
        
        with tab1:
            # GR√ÅFICO HIER√ÅRQUICO - Escolas no eixo Y, m√©dias no eixo X
            medias_por_escola = dados_melted.groupby([coluna_agrupamento, 'Disciplina'])['Nota'].mean().reset_index()
            
            # ORDENA√á√ÉO CORRIGIDA: Maior m√©dia em cima, menor em baixo
            ordem_escolas = medias_por_escola.groupby(coluna_agrupamento)['Nota'].mean().sort_values(ascending=False).index
            
            fig_hierarquico = px.bar(
                medias_por_escola,
                x='Nota',
                y=coluna_agrupamento,
                color='Disciplina',
                orientation='h',  # Barras horizontais
                title=f'üèÜ Ranking de M√©dias por Escola - {dataset_name}',
                hover_data={
                    'Nota': ':.2f',
                    coluna_agrupamento: True
                },
                category_orders={coluna_agrupamento: ordem_escolas}  # Ordenar escolas (maior ‚Üí menor)
            )
            
            fig_hierarquico.update_layout(
                yaxis_title='Escola',
                xaxis_title='M√©dia de Notas',
                height=600,
                showlegend=True,
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=1.02,
                    xanchor="right",
                    x=1
                )
            )
            
            # Adicionar linha da m√©dia geral
            media_geral = data_clean[colunas_analise].mean().mean()
            fig_hierarquico.add_vline(
                x=media_geral, 
                line_dash="dash", 
                line_color="red",
                annotation_text=f"M√©dia Geral: {media_geral:.2f}",
                annotation_position="top right"
            )
            
            st.plotly_chart(fig_hierarquico, use_container_width=True)
            
            # Legenda informativa
            st.info("üèÖ **Ranking:** As escolas est√£o ordenadas da **maior** para a **menor** m√©dia geral. A escola no topo tem a melhor performance.")
            
            # Mostrar top 3 e bottom 3 escolas
            st.subheader("üéØ Destaques do Ranking")
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**ü•á Top 3 Melhores Escolas:**")
                top_3 = ordem_escolas[:3]
                for i, escola in enumerate(top_3, 1):
                    medal = ["ü•á", "ü•à", "ü•â"][i-1]
                    media_geral_escola = medias_por_escola.groupby(coluna_agrupamento)['Nota'].mean().loc[escola]
                    st.write(f"{medal} **{escola}:** {media_geral_escola:.2f}")
            
            with col2:
                st.write("**üìâ 3 Escolas com Menor Desempenho:**")
                bottom_3 = ordem_escolas[-3:]
                for i, escola in enumerate(reversed(bottom_3), 1):
                    media_geral_escola = medias_por_escola.groupby(coluna_agrupamento)['Nota'].mean().loc[escola]
                    st.write(f"üìâ **{escola}:** {media_geral_escola:.2f}")
        
        with tab2:
            # Gr√°fico de compara√ß√£o horizontal entre disciplinas
            if len(colunas_analise) > 1:
                # Pivot table para ter disciplinas como colunas
                pivot_medias = medias_por_escola.pivot(
                    index=coluna_agrupamento, 
                    columns='Disciplina', 
                    values='Nota'
                ).reset_index()
                
                # Ordenar pela m√©dia geral (MAIOR ‚Üí MENOR)
                pivot_medias['M√©dia_Geral'] = pivot_medias[colunas_analise].mean(axis=1)
                pivot_medias = pivot_medias.sort_values('M√©dia_Geral', ascending=False)
                
                fig_comparacao = go.Figure()
                
                # Adicionar uma trace para cada disciplina
                colors = px.colors.qualitative.Set3
                for i, disciplina in enumerate(colunas_analise):
                    fig_comparacao.add_trace(go.Bar(
                        y=pivot_medias[coluna_agrupamento],
                        x=pivot_medias[disciplina],
                        name=disciplina,
                        orientation='h',
                        marker_color=colors[i % len(colors)],
                        hovertemplate=f'<b>%{{y}}</b><br>{disciplina}: %{{x:.2f}}<extra></extra>'
                    ))
                
                fig_comparacao.update_layout(
                    title=f'üìä Compara√ß√£o entre Disciplinas - {dataset_name}',
                    xaxis_title='M√©dia de Notas',
                    yaxis_title='Escola',
                    barmode='group',  # Barras agrupadas
                    height=600,
                    showlegend=True
                )
                
                st.plotly_chart(fig_comparacao, use_container_width=True)
            else:
                st.info("Selecione mais de uma disciplina para ver a compara√ß√£o entre elas.")
        
        with tab3:
            # Box plot da distribui√ß√£o por disciplina
            fig_box = px.box(
                dados_melted,
                x='Nota',
                y='Disciplina',
                color='Disciplina',
                orientation='h',  # Horizontal
                title=f'üéØ Distribui√ß√£o de Notas por Disciplina - {dataset_name}',
                points="all"
            )
            
            fig_box.update_layout(
                yaxis_title='Disciplina',
                xaxis_title='Nota',
                height=500,
                showlegend=False
            )
            
            st.plotly_chart(fig_box, use_container_width=True)
            
            # Box plot por escola (apenas para top escolas) - ORDENADO MAIOR ‚Üí MENOR
            st.subheader("üì¶ Distribui√ß√£o por Escola (Top 15)")
            top_escolas = data_clean[coluna_agrupamento].value_counts().head(15).index
            data_top_escolas = data_clean[data_clean[coluna_agrupamento].isin(top_escolas)]
            
            if len(data_top_escolas) > 0:
                dados_top_melted = data_top_escolas.melt(
                    id_vars=[coluna_agrupamento],
                    value_vars=colunas_analise,
                    var_name='Disciplina',
                    value_name='Nota'
                )
                
                # Ordenar escolas pela m√©dia (MAIOR ‚Üí MENOR)
                ordem_top_escolas = dados_top_melted.groupby(coluna_agrupamento)['Nota'].mean().sort_values(ascending=False).index
                
                fig_box_escolas = px.box(
                    dados_top_melted,
                    x='Nota',
                    y=coluna_agrupamento,
                    color='Disciplina',
                    orientation='h',
                    title=f'Distribui√ß√£o de Notas - Top 15 Escolas - {dataset_name}',
                    category_orders={coluna_agrupamento: ordem_top_escolas}
                )
                
                fig_box_escolas.update_layout(
                    yaxis_title='Escola',
                    xaxis_title='Nota',
                    height=600
                )
                
                st.plotly_chart(fig_box_escolas, use_container_width=True)
        
        with tab4:
            # Estat√≠sticas resumidas por disciplina
            st.subheader("üìã Estat√≠sticas Detalhadas por Disciplina")
            
            for disciplina in colunas_analise:
                with st.expander(f"üìö {disciplina}", expanded=False):
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("M√©dia Geral", f"{data_clean[disciplina].mean():.2f}")
                        st.metric("Mediana", f"{data_clean[disciplina].median():.2f}")
                    
                    with col2:
                        st.metric("Desvio Padr√£o", f"{data_clean[disciplina].std():.2f}")
                        st.metric("Vari√¢ncia", f"{data_clean[disciplina].var():.2f}")
                    
                    with col3:
                        st.metric("M√≠nimo", f"{data_clean[disciplina].min():.2f}")
                        st.metric("M√°ximo", f"{data_clean[disciplina].max():.2f}")
                    
                    with col4:
                        st.metric("Assimetria", f"{data_clean[disciplina].skew():.2f}")
                        st.metric("Curtose", f"{data_clean[disciplina].kurtosis():.2f}")
                    
                    # Top 5 escolas nessa disciplina (MAIOR ‚Üí MENOR)
                    st.subheader(f"üèÖ Top 5 Escolas - {disciplina}")
                    top_escolas_disciplina = data_clean.groupby(coluna_agrupamento)[disciplina].mean().nlargest(5).round(2)
                    for i, (escola, media) in enumerate(top_escolas_disciplina.items(), 1):
                        medal = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"][i-1]
                        st.write(f"{medal} **{escola}:** {media}")
    
    else:
        # An√°lise gen√©rica para outras combina√ß√µes de colunas (mantida igual)
        st.subheader("üìà An√°lise Estat√≠stica Geral")
        
        # Preparar dados
        colunas_analise_selecionadas = [coluna_agrupamento] + colunas_analise
        data_analysis = data[colunas_analise_selecionadas].copy()
        
        # Converter colunas num√©ricas
        for col in colunas_analise:
            if data_analysis[col].dtype == 'object':
                data_analysis[col] = pd.to_numeric(data_analysis[col], errors='coerce')
        
        # Remover valores nulos
        data_clean = data_analysis.dropna()
        
        if len(data_clean) == 0:
            st.error("‚ùå N√£o h√° dados v√°lidos para an√°lise ap√≥s a limpeza.")
            return
        
        # Estat√≠sticas agrupadas
        estatisticas_agrupadas = data_clean.groupby(coluna_agrupamento)[colunas_analise].agg(['mean', 'std', 'count']).round(2)
        estatisticas_agrupadas.columns = ['_'.join(col).strip() for col in estatisticas_agrupadas.columns.values]
        estatisticas_agrupadas = estatisticas_agrupadas.reset_index()
        
        st.subheader("üìä Estat√≠sticas Agrupadas")
        st.dataframe(estatisticas_agrupadas, use_container_width=True)
        
        # Gr√°ficos para an√°lise gen√©rica tamb√©m em formato hier√°rquico
        if len(colunas_analise) > 0:
            st.subheader("üìà Visualiza√ß√µes")
            
            # Preparar dados para gr√°ficos
            dados_melted = data_clean.melt(
                id_vars=[coluna_agrupamento],
                value_vars=colunas_analise,
                var_name='Vari√°vel',
                value_name='Valor'
            )
            
            tab1, tab2 = st.tabs(["üìä Ranking Hier√°rquico", "üéØ Distribui√ß√£o"])
            
            with tab1:
                # Gr√°fico hier√°rquico para an√°lise gen√©rica
                medias_agrupadas = dados_melted.groupby([coluna_agrupamento, 'Vari√°vel'])['Valor'].mean().reset_index()
                
                # Ordenar pela m√©dia geral (MAIOR ‚Üí MENOR)
                ordem_categorias = medias_agrupadas.groupby(coluna_agrupamento)['Valor'].mean().sort_values(ascending=False).index
                
                fig_hierarquico = px.bar(
                    medias_agrupadas,
                    x='Valor',
                    y=coluna_agrupamento,
                    color='Vari√°vel',
                    orientation='h',
                    title=f'Ranking por {coluna_agrupamento} - {dataset_name}',
                    hover_data={'Valor': ':.2f'},
                    category_orders={coluna_agrupamento: ordem_categorias}
                )
                
                fig_hierarquico.update_layout(
                    yaxis_title=coluna_agrupamento,
                    xaxis_title='Valor M√©dio',
                    height=600
                )
                
                st.plotly_chart(fig_hierarquico, use_container_width=True)
            
            with tab2:
                # Box plot da distribui√ß√£o (horizontal)
                fig_box = px.box(
                    dados_melted,
                    x='Valor',
                    y='Vari√°vel',
                    color='Vari√°vel',
                    orientation='h',
                    title=f'Distribui√ß√£o por Vari√°vel - {dataset_name}',
                    points="all"
                )
                
                fig_box.update_layout(
                    yaxis_title='Vari√°vel',
                    xaxis_title='Valor',
                    height=500
                )
                
                st.plotly_chart(fig_box, use_container_width=True)
    
    # Download dos dados processados
    st.subheader("üíæ Exportar Resultados")
    
    if 'estatisticas_escolas' in locals() or 'estatisticas_agrupadas' in locals():
        dados_exportar = estatisticas_escolas if 'estatisticas_escolas' in locals() else estatisticas_agrupadas
        csv = dados_exportar.to_csv(index=False)
        
        st.download_button(
            label="üì• Baixar estat√≠sticas em CSV",
            data=csv,
            file_name=f"analise_colunas_{dataset_name.lower().replace(' ', '_')}.csv",
            mime="text/csv"
        )


# Fun√ß√£o para an√°lise de correla√ß√£o
def correlation_analysis(data, dataset_name):
    st.header(f"üîó An√°lise de Correla√ß√£o: M√©dias vs Quantidade de Alunos - {dataset_name}")
    
    # Encontrar colunas automaticamente
    st.subheader("üéØ Identifica√ß√£o das Colunas")
    
    # Procurar por colunas similares
    escola_keywords = ['escola', 'school', 'col√©gio', 'colegio', 'institui√ß√£o', 'unidade', 'qual a sua escola']
    total_pontos_keywords = ['total', 'pontos', 'points', 'score', 'nota total', 'total de pontos']
    nota_lp_keywords = ['nota lp', 'nota_lp', 'portugues', 'portugu√™s', 'lingua portuguesa', 'lp', 'l√≠ngua portuguesa']
    nota_mat_keywords = ['nota mat', 'nota_mat', 'matem√°tica', 'matematica', 'math', 'mat']
    
    # Usar fun√ß√£o find_similar_columns corretamente
    colunas_escola_encontradas = find_similar_columns(data, escola_keywords)
    colunas_total_pontos_encontradas = find_similar_columns(data, total_pontos_keywords)
    colunas_nota_lp_encontradas = find_similar_columns(data, nota_lp_keywords)
    colunas_nota_mat_encontradas = find_similar_columns(data, nota_mat_keywords)
    
    # Mostrar colunas encontradas
    st.write("**Colunas identificadas:**")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**Escola:** {colunas_escola_encontradas[0] if colunas_escola_encontradas else 'N√£o encontrada'}")
        st.write(f"**Total de Pontos:** {colunas_total_pontos_encontradas[0] if colunas_total_pontos_encontradas else 'N√£o encontrada'}")
    
    with col2:
        st.write(f"**Nota LP:** {colunas_nota_lp_encontradas[0] if colunas_nota_lp_encontradas else 'N√£o encontrada'}")
        st.write(f"**Nota MAT:** {colunas_nota_mat_encontradas[0] if colunas_nota_mat_encontradas else 'N√£o encontrada'}")
    
    # Verificar se encontrou a coluna de escola
    if not colunas_escola_encontradas:
        st.error("‚ùå Coluna 'QUAL A SUA ESCOLA?' n√£o encontrada!")
        st.info("Selecione manualmente a coluna correspondente:")
        coluna_escola = st.selectbox(
            f"Selecione a coluna de Escola - {dataset_name}",
            data.columns,
            key=f"corr_escola_{dataset_name}"
        )
    else:
        coluna_escola = colunas_escola_encontradas[0]
    
    # Verificar e selecionar colunas de desempenho
    colunas_desempenho = []
    
    if colunas_total_pontos_encontradas:
        coluna_total_pontos = colunas_total_pontos_encontradas[0]
        colunas_desempenho.append(coluna_total_pontos)
    else:
        st.warning("‚ö†Ô∏è Coluna 'Total de pontos' n√£o encontrada automaticamente.")
        coluna_total_pontos = st.selectbox(
            f"Selecione a coluna de Total de Pontos - {dataset_name}",
            data.columns,
            key=f"corr_total_{dataset_name}"
        )
        if coluna_total_pontos:
            colunas_desempenho.append(coluna_total_pontos)
    
    if colunas_nota_lp_encontradas:
        coluna_nota_lp = colunas_nota_lp_encontradas[0]
        colunas_desempenho.append(coluna_nota_lp)
    else:
        st.warning("‚ö†Ô∏è Coluna 'NOTA LP' n√£o encontrada automaticamente.")
        coluna_nota_lp = st.selectbox(
            f"Selecione a coluna de Nota LP - {dataset_name}",
            data.columns,
            key=f"corr_lp_{dataset_name}"
        )
        if coluna_nota_lp:
            colunas_desempenho.append(coluna_nota_lp)
    
    if colunas_nota_mat_encontradas:
        coluna_nota_mat = colunas_nota_mat_encontradas[0]
        colunas_desempenho.append(coluna_nota_mat)
    else:
        st.warning("‚ö†Ô∏è Coluna 'NOTA MAT' n√£o encontrada automaticamente.")
        coluna_nota_mat = st.selectbox(
            f"Selecione a coluna de Nota MAT - {dataset_name}",
            data.columns,
            key=f"corr_mat_{dataset_name}"
        )
        if coluna_nota_mat:
            colunas_desempenho.append(coluna_nota_mat)
    
    if not colunas_desempenho:
        st.error("‚ùå Nenhuma coluna de desempenho foi selecionada.")
        return
    
    # Preparar dados para an√°lise
    st.subheader("üîÑ Calculando M√©dias e Quantidade de Alunos por Escola")
    
    # Selecionar colunas relevantes
    colunas_analise = [coluna_escola] + colunas_desempenho
    
    st.write(f"**Colunas selecionadas para an√°lise:**")
    st.write(f"- Agrupamento: {coluna_escola}")
    st.write(f"- M√©tricas: {', '.join(colunas_desempenho)}")
    
    # Criar c√≥pia dos dados
    data_analysis = data[colunas_analise].copy()
    
    # Mostrar amostra dos dados
    with st.expander("üìä Ver amostra dos dados selecionados"):
        st.dataframe(data_analysis.head(10))
    
    # Converter colunas de desempenho para num√©rico
    st.write("**Convertendo colunas para formato num√©rico...**")
    for coluna in colunas_desempenho:
        if data_analysis[coluna].dtype == 'object':
            data_analysis[coluna] = pd.to_numeric(data_analysis[coluna], errors='coerce')
            st.write(f"- {coluna}: convertida para num√©rico")
        else:
            st.write(f"- {coluna}: j√° √© num√©rico")
    
    # Remover valores nulos
    initial_count = len(data_analysis)
    data_clean = data_analysis.dropna()
    final_count = len(data_clean)
    
    st.write(f"**Limpeza de dados:** {final_count} registros v√°lidos de {initial_count} total")
    
    if final_count == 0:
        st.error("‚ùå N√£o h√° dados v√°lidos para an√°lise ap√≥s a limpeza.")
        return
    
    # Calcular estat√≠sticas por escola
    st.write("**üìà Calculando m√©dias e quantidade de alunos por escola...**")
    
    # Criar dicion√°rio de agrega√ß√£o
    agg_dict = {}
    for coluna in colunas_desempenho:
        agg_dict[coluna] = 'mean'  # Calcular m√©dia para cada coluna de desempenho
    
    # Adicionar contagem de alunos (quantidade)
    agg_dict[colunas_desempenho[0]] = ['count', 'mean']  # Count para quantidade, mean para m√©dia
    
    # Agrupar por escola
    medias_por_escola = data_clean.groupby(coluna_escola).agg(agg_dict)
    
    # Corrigir nomes das colunas
    medias_por_escola.columns = ['_'.join(col).strip() for col in medias_por_escola.columns.values]
    medias_por_escola = medias_por_escola.reset_index()
    
    # Renomear colunas para nomes mais claros
    rename_dict = {coluna_escola: 'Escola'}
    
    # Encontrar e renomear a coluna de quantidade (count)
    for col in medias_por_escola.columns:
        if '_count' in col:
            rename_dict[col] = 'Quantidade_Alunos'
            break
    
    # Renomear colunas de m√©dia
    for coluna in colunas_desempenho:
        for col in medias_por_escola.columns:
            if f'{coluna}_mean' in col:
                rename_dict[col] = f'Media_{coluna}'
    
    medias_por_escola = medias_por_escola.rename(columns=rename_dict)
    
    # Garantir que temos a coluna Quantidade_Alunos
    if 'Quantidade_Alunos' not in medias_por_escola.columns:
        contagem_por_escola = data_clean.groupby(coluna_escola).size().reset_index(name='Quantidade_Alunos')
        medias_por_escola = medias_por_escola.merge(contagem_por_escola, on='Escola')
    
    # Classificar escolas por tamanho
    medias_por_escola['Tamanho_Escola'] = pd.cut(
        medias_por_escola['Quantidade_Alunos'],
        bins=[0, 50, 100, 200, float('inf')],
        labels=['Pequena (‚â§50)', 'M√©dia (51-100)', 'Grande (101-200)', 'Muito Grande (>200)']
    )
    
    st.success(f"‚úÖ Calculadas estat√≠sticas para {len(medias_por_escola)} escolas")
    
    # Mostrar resumo
    st.subheader("üìä Resumo das Estat√≠sticas por Escola")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Total de Escolas", len(medias_por_escola))
        st.metric("Total de Alunos", medias_por_escola['Quantidade_Alunos'].sum())
    
    with col2:
        media_alunos = medias_por_escola['Quantidade_Alunos'].mean()
        st.metric("M√©dia de Alunos por Escola", f"{media_alunos:.1f}")
        
        if 'Media_Total_Pontos' in medias_por_escola.columns:
            media_pontos = medias_por_escola['Media_Total_Pontos'].mean()
            st.metric("M√©dia Geral - Total Pontos", f"{media_pontos:.2f}")
    
    with col3:
        if 'Media_Nota_LP' in medias_por_escola.columns:
            media_lp = medias_por_escola['Media_Nota_LP'].mean()
            st.metric("M√©dia Geral - Nota LP", f"{media_lp:.2f}")
        
        if 'Media_Nota_MAT' in medias_por_escola.columns:
            media_mat = medias_por_escola['Media_Nota_MAT'].mean()
            st.metric("M√©dia Geral - Nota MAT", f"{media_mat:.2f}")
    
    # Distribui√ß√£o por tamanho de escola
    st.subheader("üè´ Distribui√ß√£o das Escolas por Tamanho")
    
    dist_tamanho = medias_por_escola['Tamanho_Escola'].value_counts().sort_index()
    
    fig_dist = px.pie(
        values=dist_tamanho.values,
        names=dist_tamanho.index,
        title='Distribui√ß√£o das Escolas por Tamanho',
        color_discrete_sequence=px.colors.qualitative.Set3
    )
    
    fig_dist.update_layout(height=400)
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.plotly_chart(fig_dist, use_container_width=True)
    
    with col2:
        st.write("**Resumo por Tamanho:**")
        for tamanho, count in dist_tamanho.items():
            st.write(f"**{tamanho}:** {count} escolas")

    # AN√ÅLISE DE CORRELA√á√ÉO COM DUAS VISUALIZA√á√ïES
    st.subheader("üìà An√°lise de Correla√ß√£o: Duas Perspectivas")
    
    # Selecionar colunas num√©ricas para correla√ß√£o
    colunas_media = [col for col in medias_por_escola.columns if col.startswith('Media_')]
    
    if not colunas_media:
        st.error("‚ùå N√£o h√° colunas de m√©dia calculadas para an√°lise de correla√ß√£o.")
        return
    
    # Calcular matriz de correla√ß√£o
    colunas_correlacao = ['Quantidade_Alunos'] + colunas_media
    data_corr = medias_por_escola[colunas_correlacao]
    corr_matrix = data_corr.corr().round(3)
    
    # Focar nas correla√ß√µes com Quantidade_Alunos
    correlacoes_com_quantidade = corr_matrix.loc['Quantidade_Alunos'].drop('Quantidade_Alunos')
    
    # Gr√°ficos de correla√ß√£o DUPLOS para cada m√©trica
    st.write("### üìä An√°lise Gr√°fica Dupla por M√©trica")
    
    for coluna_media in colunas_media:
        nome_metrica = coluna_media.replace('Media_', '').replace('_', ' ').title()
        correlacao = correlacoes_com_quantidade[coluna_media]
        
        st.write(f"#### üìà {nome_metrica}")
        
        # Criar duas colunas para os gr√°ficos
        col1, col2 = st.columns(2)
        
        with col1:
            # GR√ÅFICO 1: Com diferencia√ß√£o por tamanho
            fig_tamanho = px.scatter(
                medias_por_escola,
                x='Quantidade_Alunos',
                y=coluna_media,
                size='Quantidade_Alunos',
                color='Tamanho_Escola',
                size_max=25,
                title=f'<b>Por Tamanho da Escola</b><br><sub>Correla√ß√£o: r = {correlacao:.3f}</sub>',
                trendline="ols",
                hover_data=['Escola'],
                hover_name='Escola',
                labels={
                    'Quantidade_Alunos': 'Quantidade de Alunos',
                    coluna_media: f'M√©dia de {nome_metrica}',
                    'Tamanho_Escola': 'Tamanho da Escola',
                    'size': 'Quantidade de Alunos'
                },
                color_discrete_sequence=px.colors.qualitative.Bold
            )
            
            fig_tamanho.update_layout(
                height=500,
                showlegend=True,
                xaxis_title="Quantidade de Alunos",
                yaxis_title=f"M√©dia de {nome_metrica}",
                font=dict(size=11)
            )
            
            fig_tamanho.update_traces(
                marker=dict(opacity=0.7, line=dict(width=1, color='darkgray')),
                line=dict(dash='solid', width=3, color='red')
            )
            
            st.plotly_chart(fig_tamanho, use_container_width=True)
        
        with col2:
            # GR√ÅFICO 2: Todos os pontos uniformes (an√°lise limpa)
            fig_uniforme = px.scatter(
                medias_por_escola,
                x='Quantidade_Alunos',
                y=coluna_media,
                title=f'<b>Vis√£o Geral</b><br><sub>Correla√ß√£o: r = {correlacao:.3f}</sub>',
                trendline="ols",
                hover_data=['Escola', 'Tamanho_Escola'],
                hover_name='Escola',
                labels={
                    'Quantidade_Alunos': 'Quantidade de Alunos',
                    coluna_media: f'M√©dia de {nome_metrica}'
                },
                color_discrete_sequence=['#1f77b4']  # Azul padr√£o
            )
            
            fig_uniforme.update_layout(
                height=500,
                showlegend=False,
                xaxis_title="Quantidade de Alunos",
                yaxis_title=f"M√©dia de {nome_metrica}",
                font=dict(size=11)
            )
            
            fig_uniforme.update_traces(
                marker=dict(
                    size=8, 
                    opacity=0.7, 
                    line=dict(width=1, color='darkgray')
                ),
                line=dict(dash='solid', width=3, color='red')
            )
            
            st.plotly_chart(fig_uniforme, use_container_width=True)
        
        # An√°lise detalhada por tamanho de escola (abaixo dos gr√°ficos)
        st.write(f"**üìã An√°lise Detalhada de {nome_metrica} por Tamanho de Escola:**")
        
        # Calcular estat√≠sticas por tamanho
        stats_por_tamanho = medias_por_escola.groupby('Tamanho_Escola').agg({
            coluna_media: ['mean', 'std', 'count'],
            'Quantidade_Alunos': 'mean'
        }).round(2)
        
        # Formatando a tabela
        stats_por_tamanho.columns = ['M√©dia', 'Desvio Padr√£o', 'N¬∫ Escolas', 'M√©dia Alunos']
        stats_por_tamanho = stats_por_tamanho.reset_index()
        
        # Mostrar tabela e m√©tricas lado a lado
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.dataframe(stats_por_tamanho, use_container_width=True)
        
        with col2:
            st.metric(
                "Correla√ß√£o Geral",
                f"{correlacao:.3f}",
                interpretar_correlacao_simples(correlacao)
            )
            
            # Encontrar melhor desempenho por tamanho
            if not stats_por_tamanho.empty:
                melhor_tamanho = stats_por_tamanho.loc[stats_por_tamanho['M√©dia'].idxmax()]
                st.metric(
                    "Melhor Desempenho",
                    f"{melhor_tamanho['Tamanho_Escola']}",
                    f"M√©dia: {melhor_tamanho['M√©dia']}"
                )
        
        st.write("---")
    
    # Tabela resumo de correla√ß√µes
    st.subheader("üìã Resumo Geral das Correla√ß√µes")
    
    resumo_correlacoes = []
    for coluna_media in colunas_media:
        nome_metrica = coluna_media.replace('Media_', '').replace('_', ' ').title()
        correlacao = correlacoes_com_quantidade[coluna_media]
        
        resumo_correlacoes.append({
            'M√©trica': nome_metrica,
            'Correla√ß√£o (r)': correlacao,
            'Interpreta√ß√£o': interpretar_correlacao_simples(correlacao),
            'For√ßa': classificar_forca_correlacao(correlacao)
        })
    
    resumo_df = pd.DataFrame(resumo_correlacoes)
    st.dataframe(resumo_df, use_container_width=True)
    
    # An√°lise comparativa final
    st.subheader("üìà Vis√£o Comparativa das Correla√ß√µes")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de barras comparativo
        fig_comparativo = px.bar(
            resumo_df,
            x='M√©trica',
            y='Correla√ß√£o (r)',
            color='Correla√ß√£o (r)',
            color_continuous_scale='RdBu_r',
            title='Compara√ß√£o das Correla√ß√µes',
            text='Correla√ß√£o (r)',
            hover_data=['Interpreta√ß√£o']
        )
        
        fig_comparativo.update_layout(
            xaxis_title='M√©trica de Desempenho',
            yaxis_title='Coeficiente de Correla√ß√£o (r)',
            height=400
        )
        
        fig_comparativo.update_traces(
            texttemplate='%{text:.3f}', 
            textposition='outside'
        )
        
        st.plotly_chart(fig_comparativo, use_container_width=True)
    
    with col2:
        # Resumo estat√≠stico
        st.write("**üìä Resumo Estat√≠stico**")
        
        if not resumo_df.empty:
            # An√°lise geral
            correlacoes_positivas = len([r for r in resumo_df['Correla√ß√£o (r)'] if r > 0])
            correlacoes_negativas = len([r for r in resumo_df['Correla√ß√£o (r)'] if r < 0])
            
            st.metric("Correla√ß√µes Positivas", correlacoes_positivas)
            st.metric("Correla√ß√µes Negativas", correlacoes_negativas)
            
            maior_corr = resumo_df.loc[resumo_df['Correla√ß√£o (r)'].abs().idxmax()]
            st.metric(
                "Maior Correla√ß√£o (abs)", 
                f"{maior_corr['Correla√ß√£o (r)']:.3f}",
                f"{maior_corr['M√©trica']}"
            )
            
            # Distribui√ß√£o por for√ßa
            st.write("**For√ßa das Correla√ß√µes:**")
            for forca in ['Forte', 'Moderada', 'Fraca', 'Muito Fraca']:
                count = len(resumo_df[resumo_df['For√ßa'] == forca])
                if count > 0:
                    st.write(f"- {forca}: {count}")
    
    # Insights finais
    st.subheader("üí° Insights e Recomenda√ß√µes")
    
    if not resumo_df.empty:
        # An√°lise geral
        correlacoes_positivas = len([r for r in resumo_df['Correla√ß√£o (r)'] if r > 0])
        correlacoes_negativas = len([r for r in resumo_df['Correla√ß√£o (r)'] if r < 0])
        
        st.write(f"**üìà Distribui√ß√£o das Correla√ß√µes:**")
        st.write(f"- **{correlacoes_positivas} correla√ß√£o(√µes) positiva(s)** - Escolas maiores tendem a ter melhor desempenho")
        st.write(f"- **{correlacoes_negativas} correla√ß√£o(√µes) negativa(s)** - Escolas menores tendem a ter melhor desempenho")
        
        # Recomenda√ß√µes baseadas nos resultados
        st.write("**üéØ Recomenda√ß√µes Estrat√©gicas:**")
        
        if any(r > 0.5 for r in resumo_df['Correla√ß√£o (r)']):
            st.success("""
            **Forte evid√™ncia de vantagem das escolas maiores:**
            - Considere pol√≠ticas que aproveitem economias de escala
            - Investir em infraestrutura para escolas maiores
            - Desenvolver programas espec√≠ficos para escolas de grande porte
            """)
        elif any(r < -0.5 for r in resumo_df['Correla√ß√£o (r)']):
            st.warning("""
            **Forte evid√™ncia de vantagem das escolas menores:**
            - Avaliar estrat√©gias de descentraliza√ß√£o
            - Considerar cria√ß√£o de unidades menores
            - Focar em personaliza√ß√£o do ensino
            """)
        else:
            st.info("""
            **Rela√ß√£o limitada entre tamanho e desempenho:**
            - Focar em outros fatores determinantes
            - Qualidade docente e forma√ß√£o continuada
            - Infraestrutura adequada
            - Gest√£o escolar eficiente
            - Participa√ß√£o da comunidade
            """)
        
        # Destaques por categoria de tamanho
        st.write("**üè´ Destaques por Categoria de Tamanho:**")
        
        # Encontrar a categoria com melhor desempenho m√©dio geral
        desempenho_por_tamanho = {}
        for coluna_media in colunas_media:
            stats = medias_por_escola.groupby('Tamanho_Escola')[coluna_media].mean()
            for tamanho, media in stats.items():
                if tamanho not in desempenho_por_tamanho:
                    desempenho_por_tamanho[tamanho] = []
                desempenho_por_tamanho[tamanho].append(media)
        
        # Calcular m√©dia geral por tamanho
        media_geral_por_tamanho = {
            tamanho: sum(medias) / len(medias) 
            for tamanho, medias in desempenho_por_tamanho.items()
        }
        
        if media_geral_por_tamanho:
            melhor_tamanho_geral = max(media_geral_por_tamanho, key=media_geral_por_tamanho.get)
            st.write(f"- **Melhor desempenho m√©dio:** {melhor_tamanho_geral}")
            st.write(f"- **M√©dia geral:** {media_geral_por_tamanho[melhor_tamanho_geral]:.2f}")

# Fun√ß√µes auxiliares (manter as mesmas)
def interpretar_correlacao_detalhada(r):
    """Interpreta√ß√£o detalhada do coeficiente de correla√ß√£o"""
    if r >= 0.7:
        return "Correla√ß√£o positiva forte: escolas com mais alunos tendem a ter desempenho significativamente melhor"
    elif r >= 0.5:
        return "Correla√ß√£o positiva moderada: existe uma rela√ß√£o positiva entre tamanho da escola e desempenho"
    elif r >= 0.3:
        return "Correla√ß√£o positiva fraca: leve tend√™ncia de escolas maiores terem melhor desempenho"
    elif r > -0.3:
        return "Correla√ß√£o muito fraca ou nula: praticamente n√£o h√° rela√ß√£o entre tamanho da escola e desempenho"
    elif r > -0.5:
        return "Correla√ß√£o negativa fraca: leve tend√™ncia de escolas menores terem melhor desempenho"
    elif r > -0.7:
        return "Correla√ß√£o negativa moderada: escolas menores tendem a ter melhor desempenho"
    else:
        return "Correla√ß√£o negativa forte: escolas com menos alunos tendem a ter desempenho significativamente melhor"

def interpretar_correlacao_simples(r):
    """Interpreta√ß√£o simples do coeficiente de correla√ß√£o"""
    if r >= 0.7:
        return "Correla√ß√£o positiva forte"
    elif r >= 0.5:
        return "Correla√ß√£o positiva moderada"
    elif r >= 0.3:
        return "Correla√ß√£o positiva fraca"
    elif r > -0.3:
        return "Correla√ß√£o muito fraca ou nula"
    elif r > -0.5:
        return "Correla√ß√£o negativa fraca"
    elif r > -0.7:
        return "Correla√ß√£o negativa moderada"
    else:
        return "Correla√ß√£o negativa forte"

def classificar_forca_correlacao(r):
    """Classifica a for√ßa da correla√ß√£o"""
    abs_r = abs(r)
    if abs_r >= 0.7:
        return "Forte"
    elif abs_r >= 0.5:
        return "Moderada"
    elif abs_r >= 0.3:
        return "Fraca"
    else:
        return "Muito Fraca"



# Sidebar para navega√ß√£o
st.sidebar.title("Esquenta SAEGO")
analysis_type = st.sidebar.radio(
    "Selecione o tipo de an√°lise:",
    ["Informa√ß√µes B√°sicas", "Estat√≠sticas por Escola", "An√°lise por Coluna", "Correla√ß√£o", "Valores Ausentes", "Relat√≥rio Completo"]
)

# Carregar dados
dados_3anos = load_data("dados_3anos.csv")
dados_9anos = load_data("dados_9anos.csv")

# Verificar se os dados foram carregados
if dados_3anos is not None and dados_9anos is not None:
    
    # Criar abas para cada dataset
    tab1, tab2 = st.tabs(["üìä Dados 3¬∞ S√©ries", "üìà Dados 9¬∞ Anos"])
    
    with tab1:
        if analysis_type == "Informa√ß√µes B√°sicas":
            basic_statistics(dados_3anos, "Dados 3 S√©rie")
        elif analysis_type == "Estat√≠sticas por Escola":
            school_statistics(dados_3anos, "Dados 3 S√©rie")
        elif analysis_type == "An√°lise por Coluna":
            column_analysis(dados_3anos, "Dados 3 S√©rie")
        elif analysis_type == "Correla√ß√£o":
            correlation_analysis(dados_3anos, "Dados 3 S√©rie")
        elif analysis_type == "Valores Ausentes":
            missing_values_analysis(dados_3anos, "Dados 3 S√©rie")
        elif analysis_type == "Relat√≥rio Completo":
            export_report(dados_3anos, "Dados 3 S√©rie")
    
    with tab2:
        if analysis_type == "Informa√ß√µes B√°sicas":
            basic_statistics(dados_9anos, "Dados 9 Anos")
        elif analysis_type == "Estat√≠sticas por Escola":
            school_statistics(dados_9anos, "Dados 9 Anos")
        elif analysis_type == "An√°lise por Coluna":
            column_analysis(dados_9anos, "Dados 9 Anos")
        elif analysis_type == "Correla√ß√£o":
            correlation_analysis(dados_9anos, "Dados 9 Anos")
        elif analysis_type == "Valores Ausentes":
            missing_values_analysis(dados_9anos, "Dados 9 Anos")
        elif analysis_type == "Relat√≥rio Completo":
            export_report(dados_9anos, "Dados 9 Anos")
    
    # Compara√ß√£o entre datasets (opcional)
    st.sidebar.markdown("---")
    if st.sidebar.checkbox("Mostrar Compara√ß√£o entre Datasets"):
        st.header("üîÑ Compara√ß√£o entre Dados 3 Anos vs 9 Anos")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Dados 3¬∞ S√©rie")
            st.write(f"Registros: {dados_3anos.shape[0]}")
            st.write(f"Vari√°veis: {dados_3anos.shape[1]}")
            st.write(f"Valores nulos: {dados_3anos.isnull().sum().sum()}")
        
        with col2:
            st.subheader("Dados 9¬∞ Anos")
            st.write(f"Registros: {dados_9anos.shape[0]}")
            st.write(f"Vari√°veis: {dados_9anos.shape[1]}")
            st.write(f"Valores nulos: {dados_9anos.isnull().sum().sum()}")

else:
    st.error("N√£o foi poss√≠vel carregar um ou ambos os arquivos de dados.")
    st.info("""
    Certifique-se de que:
    1. Os arquivos 'dados_3anos.csv' e 'dados_9anos.csv' est√£o no mesmo diret√≥rio deste script
    2. Os arquivos est√£o no formato CSV v√°lido
    3. Os nomes dos arquivos est√£o corretos
    """)

# Rodap√©
st.sidebar.markdown("---")
st.sidebar.info(
    "Desenvolvido com Streamlit | "
    "Esquenta SAEGO 2025 √ÅGUAS LINDAS - GO"
)
